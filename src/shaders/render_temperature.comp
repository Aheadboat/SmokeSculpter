#version 300 es

precision highp float;

in vec3 v_position;
in vec3 v_normal;

out vec4 o_color;

uniform mat4 u_mvpMatrix;
uniform mat4 u_modelMatrix;
uniform mat4 u_invModelMatrix;
uniform vec3 u_scale;
uniform vec3 u_cameraPosition;
uniform int u_cellTextureSize;
uniform ivec3 u_resolution;
uniform vec3 u_simulationSpace;
uniform sampler2D u_smokeTexture;
uniform float u_gridSpacing;

#define AMBIENT_TEMPERATURE 273.0

struct Ray {
    vec3 origin;
    vec3 dir;
};

Ray convertRayFromWorldToObject(Ray ray) {
    vec3 origin = (u_invModelMatrix * vec4(ray.origin, 1.0)).xyz;
    vec3 dir = normalize((u_invModelMatrix * vec4(ray.dir, 0.0)).xyz);
    return Ray(origin, dir);
}

void getRange(Ray ray, inout float tmin, inout float tmax) {
    for (int i = 0; i < 3; i++) {
        float t1 = (u_scale[i] - ray.origin[i]) / ray.dir[i];
        float t2 = (-u_scale[i] - ray.origin[i]) / ray.dir[i];
        tmin = max(tmin, min(t1, t2));
        tmax = min(tmax, max(t1, t2));
    }
}

int convertCellIndexToCellId(ivec3 cellIndex) {
    return cellIndex.x + cellIndex.y * u_resolution.x + cellIndex.z * (u_resolution.x * u_resolution.y);
}

ivec2 convertCellIdToCoord(int cellId) {
    return ivec2(cellId % u_cellTextureSize, cellId / u_cellTextureSize);
}

ivec2 convertCellIndexToCoord(ivec3 cellIndex) {
    int cellId = convertCellIndexToCellId(cellIndex);
    return convertCellIdToCoord(cellId);
}

ivec3 convertPositionToCellIndex(vec3 position) {
    return ivec3(position / u_gridSpacing - 0.5);
}

vec3 convertToSimulationSpace(vec3 p) {
    p /= u_scale;
    p *= u_simulationSpace;
    p = (p + u_simulationSpace) * 0.5;
    return p;
}

float sampleTemperature(ivec3 cellIndex) {
    if (cellIndex.x < 0 || cellIndex.x >= u_resolution.x ||
    cellIndex.y < 0 || cellIndex.y >= u_resolution.y ||
    cellIndex.z < 0 || cellIndex.z >= u_resolution.z) {
        return AMBIENT_TEMPERATURE;
    }
    ivec2 coord = convertCellIndexToCoord(cellIndex);
    return texelFetch(u_smokeTexture, coord, 0).y;
}

float sampleTemperature(vec3 p) {
    vec3 cellIndex = convertToSimulationSpace(p) / u_gridSpacing;

    ivec3 i = ivec3(cellIndex) - (1 - int(step(0.5, cellIndex)));
    vec3 f = smoothstep(0.0, 1.0, fract(cellIndex + 0.5));

    float temp000 = sampleTemperature(i);
    float temp100 = sampleTemperature(i + ivec3(1, 0, 0));
    float temp010 = sampleTemperature(i + ivec3(0, 1, 0));
    float temp110 = sampleTemperature(i + ivec3(1, 1, 0));
    float temp001 = sampleTemperature(i + ivec3(0, 0, 1));
    float temp101 = sampleTemperature(i + ivec3(1, 0, 1));
    float temp011 = sampleTemperature(i + ivec3(0, 1, 1));
    float temp111 = sampleTemperature(i + ivec3(1, 1, 1));

    return mix(
    mix(mix(temp000, temp100, f.x), mix(temp010, temp110, f.x), f.y),
    mix(mix(temp001, temp101, f.x), mix(temp011, temp111, f.x), f.y),
    f.z
    );
}

#define RAYMARCH_ITERATIONS 128

const vec4[6] TEMPERATURE_COLOR = vec4[](
vec4(0.0, 0.0, 0.0, 0.0),
vec4(0.0, 0.0, 0.0, AMBIENT_TEMPERATURE),
vec4(1.0, 0.0, 0.0, AMBIENT_TEMPERATURE + 100.0),
vec4(1.0, 0.5, 0.0, AMBIENT_TEMPERATURE + 200.0),
vec4(1.0, 1.0, 1.0, AMBIENT_TEMPERATURE + 300.0),
vec4(0.5, 0.5, 1.0, AMBIENT_TEMPERATURE + 400.0)
);

vec3 getTemperatureColor(float temperature) {
    vec3 color = TEMPERATURE_COLOR[5].xyz;
    for (int i = 0; i < 5; i++) {
        if (temperature < TEMPERATURE_COLOR[i + 1].w) {
            color = mix(TEMPERATURE_COLOR[i].xyz, TEMPERATURE_COLOR[i + 1].xyz,
            1.0 - (TEMPERATURE_COLOR[i + 1].w - temperature) / (TEMPERATURE_COLOR[i + 1]. w - TEMPERATURE_COLOR[i].w));
            break;
        }
    }
    return color;
}

vec4 raymarch(vec3 ro, vec3 rd, float tmin, float tmax) {
    float raymarchSize = (2.0 * length(u_scale)) / float(RAYMARCH_ITERATIONS);
    vec3 p = ro + (tmin + (raymarchSize - mod(tmin, raymarchSize))) * rd;
    vec3 color = vec3(0.0);
    float transmittance = 1.0;
    for (int ri = 0; ri < RAYMARCH_ITERATIONS; ri++) {
        float temperature = sampleTemperature(p);
        vec3 c = getTemperatureColor(temperature);
        float density = clamp((temperature - AMBIENT_TEMPERATURE) / 500.0, 0.0, 1.0);
        color += c * transmittance * density;
        transmittance *= 1.0 - density;
        if (transmittance < 0.001) {
            break;
        }
        p += raymarchSize * rd;
    }
    return vec4(color, 1.0 - transmittance);
}

void main(void) {
    vec3 dir = normalize(v_position - u_cameraPosition);
    Ray ray = convertRayFromWorldToObject(Ray(u_cameraPosition, dir));
    float tmin = 0.0;
    float tmax = 1e16;
    getRange(ray, tmin, tmax);
    vec4 c = raymarch(ray.origin, ray.dir, tmin, tmax);
    if (c.w > 0.0) {
        o_color = vec4(c.rgb, c.w);
    } else {
        discard;
    }
}